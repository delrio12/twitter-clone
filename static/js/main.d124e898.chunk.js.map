{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","id","post","key","Widgets","tweetId","sourceType","screenName","options","height","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d124e898.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SidebarOption.css\";\r\n\r\nfunction SidebarOption({ active, text, Icon }) {\r\n    return (\r\n        //If it is active go ahead and add the sidebar option\r\n        <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\r\n            <Icon />\r\n            <h2>{text}</h2>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarOption;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction Sidebar() {\r\n    return  (\r\n        <div className=\"sidebar\">\r\n            {/* Twitter icon */}\r\n            <TwitterIcon className=\"sidebar__twitterIcon\"/>\r\n\r\n            <SidebarOption Icon={HomeIcon} text=\"Home\"/>\r\n            <SidebarOption Icon={SearchIcon} text=\"Explore\"/>\r\n            <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\"/>\r\n            <SidebarOption Icon={MailOutlineIcon} text=\"Messages\"/>\r\n            <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\"/>\r\n            <SidebarOption Icon={ListAltIcon} text=\"Lists\"/>\r\n            <SidebarOption Icon={PermIdentityIcon} text=\"Profile\"/>\r\n            <SidebarOption Icon={MoreHorizIcon} text=\"More\"/>\r\n\r\n            {/* Button --> Tweet */}\r\n            <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth> Tweet</Button>\r\n            \r\n\r\n    \r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import firebase from \"firebase\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBP-s2C4mY8LfhOEAxyf4LWDEKKWnZ5G5k\",\r\n    authDomain: \"twitter-clone-55b33.firebaseapp.com\",\r\n    databaseURL: \"https://twitter-clone-55b33.firebaseio.com\",\r\n    projectId: \"twitter-clone-55b33\",\r\n    storageBucket: \"twitter-clone-55b33.appspot.com\",\r\n    messagingSenderId: \"552624724541\",\r\n    appId: \"1:552624724541:web:93c08cfead1ed401afe854\",\r\n    measurementId: \"G-RT25CEM99W\"\r\n  };\r\n  \r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n  const db = firebaseApp.firestore();\r\n\r\n  export default db;","import React, { useState } from 'react';\r\nimport \"./TweetBox.css\";\r\nimport { Avatar, Button } from \"@material-ui/core\"\r\nimport db from \"./firebase\";\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\r\nimport GifOutlinedIcon from '@material-ui/icons/GifOutlined';\r\nimport BarChartOutlinedIcon from '@material-ui/icons/BarChartOutlined';\r\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\r\nimport CalendarTodayOutlinedIcon from '@material-ui/icons/CalendarTodayOutlined';\r\n\r\n\r\nfunction TweetBox() {\r\n    const [tweetMessage, setTweetMessage] = useState(\"\");\r\n    const [tweetImage, setTweetImage] = useState(\"\");\r\n\r\n    const sendTweet = e => {\r\n        e.preventDefault();\r\n\r\n        db.collection('posts').add({\r\n            displayName:\"Andres Del Rio\",\r\n            username: \"DevRio11\",\r\n            verified: false,\r\n            text: tweetMessage,\r\n            image: tweetImage,\r\n            avatar: \"https://pbs.twimg.com/profile_images/1320509869280137218/tTpOmYM0_400x400.jpg\"\r\n        });\r\n\r\n        setTweetMessage(\"\");\r\n        setTweetImage(\"\"); \r\n    }\r\n\r\n    return (\r\n        <div className=\"tweetBox\">\r\n            <form>\r\n                <div className=\"tweetBox__input\">\r\n                    <Avatar src=\"https://pbs.twimg.com/profile_images/1320509869280137218/tTpOmYM0_400x400.jpg\"></Avatar>\r\n                    <input\r\n                        onChange={e => setTweetMessage(e.target.value)} \r\n                        value={tweetMessage}\r\n                        placeholder=\"What's happening?\" \r\n                        type=\"text\" \r\n                    />\r\n                </div>\r\n                <input \r\n                    value={tweetImage}\r\n                    onChange={(e) => setTweetImage(e.target.value)}\r\n                    className=\"tweetBox__imageInput\" \r\n                    placeholder=\"Optional: Enter image URL\" \r\n                    type=\"text\" \r\n                />\r\n                <div className=\"tweetBox__Icons\">\r\n                    <div className=\"tweetBox__shareIcons\">\r\n                        <ImageOutlinedIcon></ImageOutlinedIcon>\r\n                        <GifOutlinedIcon></GifOutlinedIcon>\r\n                        <BarChartOutlinedIcon></BarChartOutlinedIcon>\r\n                        <SentimentSatisfiedOutlinedIcon></SentimentSatisfiedOutlinedIcon>\r\n                        <CalendarTodayOutlinedIcon></CalendarTodayOutlinedIcon>\r\n                    </div>\r\n                        <Button onClick={sendTweet} type=\"submit\" className=\"tweetBox__tweetButton\">Tweet</Button>\r\n                         \r\n                </div>\r\n                \r\n\r\n                 </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TweetBox\r\n","import React, { forwardRef }from 'react';\r\nimport \"./Post.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\nconst Post = forwardRef (({ \r\n    displayName, \r\n    username, \r\n    verified, \r\n    text, \r\n    image, \r\n    avatar \r\n}, ref) => {\r\n    \r\n    return (\r\n        <div className=\"post\" ref={ref}>\r\n            <div className=\"post__avatar\">\r\n                <Avatar src={avatar}></Avatar>\r\n            </div>\r\n            <div className=\"post__body\">\r\n               <div className=\"post__header\">\r\n                    <div className=\"post__headerText\">\r\n                        <h3> {displayName} {\" \"}\r\n                            <span className=\"post__headerSpecial\">\r\n                                {/* If you are verified then show the verified badge */}\r\n                                { verified && <VerifiedUserIcon className=\"post__badge\"/>} @{username}\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"post__headerDescription\">\r\n                        <p>{text}</p>\r\n                    </div>\r\n                </div>\r\n                <img src= {image} alt=\"\" />\r\n                <div className=\"post__footer\">\r\n                    <ChatBubbleOutlineIcon fontSize=\"small\" />\r\n                    <RepeatIcon fontSize=\"small\" />\r\n                    <FavoriteBorderIcon fontSize=\"small\" />\r\n                    <PublishIcon fontSize=\"small\" />    \r\n                </div>     \r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./Feed.css\";\r\nimport TweetBox from \"./TweetBox\";\r\nimport Post from \"./Post\";\r\nimport db from './firebase';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction Feed() {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        /* go to the collection and set the posts to the values inside the docs on the database and map them */\r\n        db.collection('posts').onSnapshot(snapshot => (\r\n            setPosts(snapshot.docs.map(doc => doc.data()))\r\n        ))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"feed\">\r\n            {/* Header */}\r\n            <div className=\"feed_header\">\r\n                <h2 id=\"home\"> Home</h2>\r\n            </div>\r\n\r\n            {/* TweetBox */}\r\n            <TweetBox />\r\n\r\n            {/* Post */}\r\n            <FlipMove>\r\n            {posts.map(post => (\r\n                <Post\r\n                key={post.text}\r\n                displayName={post.displayName}\r\n                username={post.username}\r\n                verified={post.verified}\r\n                text={post.text}\r\n                avatar={post.avatar}\r\n                image={post.image}\r\n                />\r\n\r\n            ))}\r\n            </FlipMove>\r\n    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","import React from 'react';\r\nimport \"./Widgets.css\";\r\n/* On the console, I installed these three using npm i react-twitter-embed, which lets me */ \r\nimport {\r\n    TwitterTimelineEmbed,\r\n    TwitterShareButton,\r\n    TwitterTweetEmbed\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nfunction Widgets() {\r\n    return (\r\n        <div className=\"widgets\">\r\n            <div className=\"widgets__input\">\r\n                <SearchIcon className=\"widgets__searchIcon\" />\r\n                <input placeholder=\"Search Twitter\" type=\"text\" />\r\n            </div>\r\n\r\n            <div className=\"widgets__widgetContainer\">\r\n                <h2>What's happening</h2>\r\n            \r\n                {/* <TwitterTweetEmbed tweetId={\"1295163407939837952\"} /> */}\r\n                <TwitterTweetEmbed \r\n                    tweetId={\"1294382104307007492\"}\r\n                 />\r\n\r\n                <TwitterTimelineEmbed\r\n                    sourceType=\"profile\"\r\n                    screenName=\"DevRio11\"\r\n                    options={{height: 250}}\r\n                />\r\n                <div className=\"widgets__tweetButton\">\r\n                <TwitterShareButton \r\n                    url={\"https://andresdelrio.dev/\"}\r\n                    options={{text: \"Check out Andres Portfolio!\", via: \"DevRio11\"}}\r\n                />\r\n                </div>\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Widgets;\r\n\r\n\r\n","import React from 'react';\nimport Sidebar from './Sidebar';\nimport Feed from './Feed';\nimport Widgets from './Widgets';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    // BEM Naming\n    <div className=\"app\">\n     \n     {/* Sidebar */}\n     <Sidebar/>\n     {/* Feed */}\n     <Feed />\n     {/* Widgets */}\n     <Widgets />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}